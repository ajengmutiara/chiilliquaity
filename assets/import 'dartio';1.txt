import 'dart:io';

import 'package:firebase_database/firebase_database.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:cabaiku/classifier/classifier.dart';
import 'package:cabaiku/core/constants.dart';
import 'package:image/image.dart' as img;
import 'package:intl/intl.dart';
import 'package:tflite_flutter/tflite_flutter.dart';

class HasilAnalisaScreen extends StatefulWidget {
  const HasilAnalisaScreen({super.key, required this.selectedImageFile});

  final File? selectedImageFile;

  @override
  State<HasilAnalisaScreen> createState() => _HasilAnalisaScreenState();
}

class _HasilAnalisaScreenState extends State<HasilAnalisaScreen> {
  String _detectedImage = "Tidak Terdefinisi!";
  String _detectedAccuracy = "0.0";
  String _detectedKadarAir = "0.0";
  double detectedKadarAir = 0.0;
  String colorDetected = '';
  String imageThumbDetected = '';
  String imageGaugeDetected = '';
  late Classifier _classifier;
  bool _isDetecting = false;
  bool _isSaving = false;

  @override
  void initState() {
    super.initState();
    _loadClassifier();
    detectedKadarAir = (0 * 100).truncateToDouble() / 100;
  }

  Future<void> _loadClassifier() async {
    debugPrint(
      'Start loading of Classifier with '
      'labels at $tfLiteLabel, '
      'model at $tfLiteModel',
    );

    final classifier = await Classifier.loadWith(
      labelsFileName: tfLiteLabel,
      modelFileName: tfLiteModel,
    );

    setState(() {
      _classifier = classifier!;
      // Perform classification when the classifier is loaded and the image is available
      _detectImage();
    });
  }

  Future<void> _detectImage() async {
    _setDetecting(true);

    if (widget.selectedImageFile == null) {
      return;
    }

    File image = File(widget.selectedImageFile!.path);

    final imageInput = img.decodeImage(image.readAsBytesSync())!;

    final resultCategory = _classifier.predict(imageInput);

    final result = resultCategory.score >= 0.8
        ? setLabel("Image Found!")
        : setLabel("Image Not Found!");
    final plantLabel = resultCategory.label;

    final accuracy = resultCategory.score * 100; // Convert to percentage
    double formattedAccuracy = (accuracy * 100).truncateToDouble() / 100;

    setLabel(plantLabel);
    setAccuracy(formattedAccuracy.toString());

    _setDetecting(false);
  }

  void setLabel(String label) {
    setState(() {
      _detectedImage = label;
      if (_detectedImage == 'Kering') {
        colorDetected = '0xffee1d23';
        imageThumbDetected = 'assets/ic_thumb_kering.png';
        imageGaugeDetected = 'assets/bad.png';
      } else if (_detectedImage == 'Basah') {
        colorDetected = '0xff119646';
        imageThumbDetected = 'assets/ic_thumb_basah.png';
        imageGaugeDetected = 'assets/good.png';
      }
    });
  }

  void setAccuracy(String accuracy) {
    setState(() {
      _detectedAccuracy = accuracy;
    });
  }

  void _setDetecting(bool status) {
    setState(() {
      _isDetecting = status;
    });
  }

  Future<bool> _onBackPressed() async {
    bool confirmExit = await showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text("Mencoba Hasil Deteksi Lain? "),
          content: Text("Apakah Anda ingin mencoba deteksi yang lain ? "),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context, true),
              child: Text(
                "Ya",
                style: TextStyle(color: Color(int.parse("0xff119646"))),
              ),
            ),
            TextButton(
              onPressed: () => Navigator.pop(context, false),
              child: Text("Tidak",
                  style: TextStyle(color: Color(int.parse("0xff119646")))),
            ),
          ],
        );
      },
    );

    if (confirmExit ?? false) {
      // Navigate back if the user confirms
      Navigator.pop(context);
    }
    return false;
  }

  // Function to show the confirmation dialog
  Future<void> _showConfirmationDialog() async {
    bool shouldSave = await showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text("Konfirmasi"),
          content: Text("Apakah Anda  Ingin Menyimpan Hasil Deteksi?"),
          actions: <Widget>[
            TextButton(
              child: Text("Tidak",
                  style: TextStyle(color: Color(int.parse("0xff119646")))),
              onPressed: () {
                Navigator.of(context).pop(false); // Do not save
              },
            ),
            TextButton(
              child: Text("Ya",
                  style: TextStyle(color: Color(int.parse("0xff119646")))),
              onPressed: () {
                Navigator.of(context).pop(true); // Save
              },
            ),
          ],
        );
      },
    );

    if (shouldSave == true) {
      _saveToFirebase(); // Save the data to Firebase
      // After saving, navigate back to the home screen
      Navigator.of(context).pop(); // Close the current screen
    } else {
      // Navigate back to the home screen
      Navigator.of(context).pop(); // Close the current screen
    }
  }

  // Function to save data to Firebase
  void _saveToFirebase() {
    final DatabaseReference historyRef =
        FirebaseDatabase.instance.ref().child('history');

    // Replace with actual values
    String timestamp = DateFormat('dd-MM-yyyy HH:mm:ss').format(DateTime.now());

    historyRef.push().set({
      'timestamp': timestamp,
      'kategori': _detectedImage,
    }).then((value) {
      print("Data saved to Firebase");
    }).catchError((error) {
      print("Failed to save data: $error");
    });
  }

  @override
  Widget build(BuildContext context) {
    print('Predicted Kadar Air: $_detectedAccuracy');
    return WillPopScope(
      onWillPop: _onBackPressed,
      child: SafeArea(
        child: Scaffold(
          body: Padding(
            padding: const EdgeInsets.only(
                top: 18.0, left: 32, right: 32, bottom: 12),
            child: SingleChildScrollView(
              controller: ScrollController(),
              child: Column(
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.start,
                    children: [
                      GestureDetector(
                        child: Image.asset(
                          'assets/btn_kembali.png',
                          width: 14,
                        ),
                        onTap: () {
                          _onBackPressed();
                        },
                      ),
                    ],
                  ),
                  const SizedBox(
                    height: 10,
                  ),
                  Center(
                    child: Container(
                      width: MediaQuery.of(context).size.width * 0.7,
                      height: MediaQuery.of(context).size.height * 0.5,
                      child: widget.selectedImageFile != null
                          ? Image.file(
                              widget.selectedImageFile!,
                            )
                          : Image.asset(
                              'assets/img_not_exist.png',
                            ),
                    ),
                  ),
                  Image.asset(
                    imageThumbDetected,
                    width: MediaQuery.of(context).size.width * 0.2,
                  ),
                  const SizedBox(height: 10),
                  Row(
                      mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                      children: [
                        Stack(children: [
                          Container(
                            width: MediaQuery.of(context).size.width * 0.25,
                            height: MediaQuery.of(context).size.height * 0.2,
                            decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(10),
                              color: Colors.grey[350],
                            ),
                            child: Center(
                              child: Column(
                                children: [
                                  SizedBox(height: 50),
                                  Image.asset(
                                    imageGaugeDetected,
                                    width:
                                        MediaQuery.of(context).size.width * 0.2,
                                  ),
                                  Text(
                                    _detectedImage,
                                    style: TextStyle(
                                      fontWeight: FontWeight.bold,
                                      fontSize: 24,
                                      color: Color(
                                        int.parse(colorDetected),
                                      ),
                                    ),
                                    textAlign: TextAlign.center,
                                  ),
                                ],
                              ),
                            ),
                          ),
                          Container(
                            width: MediaQuery.of(context).size.width * 0.25,
                            height: MediaQuery.of(context).size.height * 0.05,
                            decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(10),
                              color: Color(
                                int.parse("0xff119646"),
                              ),
                            ),
                            child: Center(
                              child: Text(
                                "Kategori",
                                style: TextStyle(
                                    fontWeight: FontWeight.bold,
                                    fontSize: 18,
                                    color: Colors.white),
                                textAlign: TextAlign.center,
                              ),
                            ),
                          ),
                        ]),
                        Stack(children: [
                          Container(
                            width: MediaQuery.of(context).size.width * 0.25,
                            height: MediaQuery.of(context).size.height * 0.2,
                            decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(10),
                              color: Colors.grey[350],
                            ),
                            child: Center(
                              child: Text(
                                "$_detectedAccuracy%",
                                style: TextStyle(
                                  fontWeight: FontWeight.bold,
                                  fontSize: 24,
                                  color: Color(
                                    int.parse(colorDetected),
                                  ),
                                ),
                                textAlign: TextAlign.center,
                              ),
                            ),
                          ),
                          Container(
                            width: MediaQuery.of(context).size.width * 0.25,
                            height: MediaQuery.of(context).size.height * 0.05,
                            decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(10),
                              color: Color(
                                int.parse("0xff119646"),
                              ),
                            ),
                            child: Center(
                              child: Text(
                                "Akurasi",
                                style: TextStyle(
                                    fontWeight: FontWeight.bold,
                                    fontSize: 18,
                                    color: Colors.white),
                                textAlign: TextAlign.center,
                              ),
                            ),
                          ),
                        ]),
                      ]),
                  SizedBox(height: 5.0),
                  Image.asset(
                    _detectedImage == 'kering'
                        ? 'assets/analisa_kering.png'
                        : 'assets/analisa_segar.png',
                    height: MediaQuery.of(context).size.height * 0.8,
                  ),
                  Container(
                    width: MediaQuery.of(context).size.width,
                    height: MediaQuery.of(context).size.height * 0.05,
                    decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(15),
                        color: Color(int.parse("0xff119646"))),
                    child: Center(
                      child: GestureDetector(
                        onTap: () {
                          _showConfirmationDialog();
                        },
                        child: Text(
                          "Selesai",
                          style: TextStyle(color: Colors.white),
                        ),
                      ),
                    ),
                  ),
                  (_isDetecting)
                      ? const Center(
                          child: SizedBox(
                              width: 20,
                              height: 20,
                              child: CircularProgressIndicator()),
                        )
                      : const SizedBox(),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }
}
